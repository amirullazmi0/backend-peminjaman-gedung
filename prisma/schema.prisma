// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  emailVerified DateTime?
  phone         String         @unique
  role          Role           @default(USER)
  accessToken   String?
  refreshToken  String?
  isActive      Boolean?       @default(false)
  lastActive    DateTime?
  password      String
  createdBy     String?
  updatedBy     String?
  deletedBy     String?
  deletedAt     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userPhoto     UserPhoto[]
  userAddress   UserAddress[]
  rentBuilding  RentBuilding[]
  building      Building[]

  @@map("users")
}

model UserPhoto {
  id        String    @id @default(uuid())
  userId    String
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedBy String?
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_photos")
}

model UserAddress {
  userId    String
  jalan     String?
  rt        String?
  rw        String?
  kelurahan String?
  kecamatan String?
  kabupaten String?
  provinsi  String?
  kodepos   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  updatedBy String?
  deletedBy String?
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("user_addresses")
}

model Building {
  id                         String                       @id @default(uuid())
  userId                     String
  name                       String
  price                      Int
  description                String?
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  createdBy                  String?
  updatedBy                  String?
  deletedBy                  String?
  deletedAt                  DateTime?
  user                       User                         @relation(fields: [userId], references: [id])
  buildingPhoto              BuildingPhoto[]
  buildingAddress            BuildingAddress[]
  rentBuilding               RentBuilding[]
  supportDocumentRequirement SupportDocumentRequirement[]

  @@map("buildings")
}

model SupportDocumentRequirement {
  id                          String                       @id @default(uuid())
  buildingId                  String
  name                        String
  templateDocumentUrl         String?
  building                    Building                     @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  createdBy                   String?
  updatedBy                   String?
  deletedBy                   String?
  deletedAt                   DateTime?
  supportDocumentRentBuilding SupportDocumentRentBuilding?

  @@map("support_documents_requirements")
}

model SupportDocumentRentBuilding {
  id                           String                     @id @default(uuid())
  rentBuildingId               String
  documentUrl                  String
  supportDocumentRequirementId String                     @unique
  createdAt                    DateTime                   @default(now())
  updatedAt                    DateTime                   @updatedAt
  createdBy                    String?
  updatedBy                    String?
  deletedBy                    String?
  deletedAt                    DateTime?
  supportDocumentRequirement   SupportDocumentRequirement @relation(fields: [supportDocumentRequirementId], references: [id], onDelete: Cascade)
  rentBuilding                 RentBuilding               @relation(fields: [rentBuildingId], references: [id], onDelete: Cascade)

  @@map("support_documents_rent_buildings")
}

model BuildingPhoto {
  id         String    @id @default(uuid())
  buildingId String
  url        String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  String?
  updatedBy  String?
  deletedBy  String?
  deletedAt  DateTime?
  building   Building  @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  @@map("building_photos")
}

model BuildingAddress {
  buildingId String
  jalan      String
  rt         String
  rw         String
  kelurahan  String
  kecamatan  String
  kota       String
  provinsi   String
  kodepos    String
  lat        String
  lng        String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  createdBy  String?
  updatedBy  String?
  deletedBy  String?
  deletedAt  DateTime?
  building   Building  @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  @@unique([buildingId])
  @@map("building_addresses")
}

model RentBuilding {
  id                          String                        @id @default(uuid())
  eventName                   String?
  userId                      String
  buildingId                  String
  startDate                   DateTime
  endDate                     DateTime
  status                      RentStatus
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  createdBy                   String?
  updatedBy                   String?
  deletedBy                   String?
  deletedAt                   DateTime?
  user                        User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  building                    Building                      @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  invoice                     Invoice[]
  supportDocumentRentBuilding SupportDocumentRentBuilding[]

  @@map("rent_buildings")
}

model Invoice {
  id        String       @id @default(uuid())
  customId  String
  rentId    String
  url       String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  createdBy String?
  updatedBy String?
  deletedBy String?
  deletedAt DateTime?
  rent      RentBuilding @relation(fields: [rentId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum RentStatus {
  PENDING
  ONPROSES
  SUCCESS
  CANCELLED
}

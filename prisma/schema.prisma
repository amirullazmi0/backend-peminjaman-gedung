// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  phone         String?
  role          Role           @default(USER)
  accessToken   String?
  refreshToken  String?
  isActive      Boolean
  lastActive    DateTime?
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userPhoto     UserPhoto[]
  userAddress   UserAddress[]
  rentBuilding  RentBuilding[]

  @@map("users")
}

model UserPhoto {
  id        String   @id @default(uuid())
  userId    String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_photos")
}

model UserAddress {
  id        String   @id @default(uuid())
  userId    String
  jalan     String
  rt        String
  rw        String
  kelurahan String
  kecamatan String
  kabupaten String
  provinsi  String
  kodepos   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_addresses")
}

model Building {
  id                         String                       @id @default(uuid())
  name                       String
  price                      Int
  description                String?
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  buildingPhoto              BuildingPhoto[]
  buildingAddress            BuildingAddress[]
  rentBuilding               RentBuilding[]
  SupportDocumentRequirement SupportDocumentRequirement[]

  @@map("buildings")
}

model SupportDocumentRequirement {
  id                          String                       @id @default(uuid())
  name                        String
  buildingId                  String
  templateDocumentUrl         String?
  building                    Building                     @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  supportDocumentRentBuilding SupportDocumentRentBuilding?

  @@map("support_documents_requirements")
}

model SupportDocumentRentBuilding {
  id                           String                     @id @default(uuid())
  documentUrl                  String
  supportDocumentRequirementId String                     @unique
  createdAt                    DateTime                   @default(now())
  updatedAt                    DateTime                   @updatedAt
  supportDocumentRequirement   SupportDocumentRequirement @relation(fields: [supportDocumentRequirementId], references: [id], onDelete: Cascade)

  @@map("support_documents_rent_buildings")
}

model BuildingPhoto {
  id         String   @id @default(uuid())
  buildingId String
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  building   Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  @@map("building_photos")
}

model BuildingAddress {
  id             String   @id @default(uuid())
  buildingId     String
  jalan          String
  rt             String
  rw             String
  kelurahan      String
  kecamatan      String
  kabupaten      String
  provinsi       String
  kodepos        String
  linkGoogleMaps String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  building       Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)

  @@map("building_addresses")
}

model RentBuilding {
  id         String     @id @default(uuid())
  userId     String
  buildingId String
  startDate  DateTime
  endDate    DateTime
  status     RentStatus
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  building   Building   @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  invoice    invoice[]

  @@map("rent_buildings")
}

model invoice {
  id        String       @id @default(uuid())
  rentId    String
  url       String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  rent      RentBuilding @relation(fields: [rentId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  OWNER
  SUPERADMIN
}

enum RentStatus {
  PENDING
  ONPROSES
  SUCCESS
  CANCELLED
}
